use.miden::account
use.std::math::u64
use.std::sys

# CONSTANTS
# =================================================================================================

const.MAX_U32=0x0000000100000000
const.BASE=1000 # 1e3
const.DIV=1000 # 1e3

# Memory Addresses for AMM calculations
const.POOL_X = 0x0040
const.POOL_Y = 0x0041
const.DX_IN = 0x0042
const.DY_OUT = 0x0043

# Run time u64 memory addresses
const.DX_MUL_Y_BASE = 100
const.DX_PLUS_Y = 104

# ERRORS
const.OVERFLOW="value larger than 32 bits"

# AMM CALCULATION
# =================================================================================================

#! Calculates the amount of asset Y to return given input of asset X
#! Formula: dy = (dx * y) / (dx + y)
#!
#! Assumes input values are base 1e3
#! Returns dy as fixed point 1e3
#!
#! Inputs: [x, y, dx]
#! Outputs: [dy]
export.get_amount_y_out
    mem_store.POOL_X
    mem_store.POOL_Y
    mem_store.DX_IN
    # => []

    mem_load.DX_IN
    u32split
    # => [dx_high, dx_low]

    mem_load.POOL_Y
    u32split
    # => [y_high, y_low, dx_high, dx_low]

    exec.u64::wrapping_mul
    # => [dxy_high, dyx_low]

    push.0.0
    # => [0, 0, dxyb_high, dyxb_low]

    mem_storew.DX_MUL_Y_BASE dropw
    # => []

    mem_load.DX_IN
    u32split
    # => [dx_high, dx_low]

    mem_load.POOL_Y
    u32split
    # => [dx_high, dx_low, y_high, y_low]

    exec.u64::wrapping_add
    # => [sum_dx_y_high, sum_dx_y_low]

    padw mem_loadw.DX_MUL_Y_BASE drop drop
    # => [dxyb_high, dyxb_low, sum_dx_y_high, sum_dx_y_low]

    movup.3 movup.3
    # => [sum_dx_y_high, sum_dx_y_low, dxyb_high, dyxb_low]

    exec.u64::div
    # => [dy_base_high, dy_base_low]

    eq.0 assert.err=OVERFLOW

    exec.sys::truncate_stack
end
